//
// Generated file, do not edit! Created by nedtool 4.6 from src/node/communication/routing/sBDSDSN/SBDSDSN.msg.
//

#ifndef _SBDSDSN_M_H_
#define _SBDSDSN_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include "RoutingPacket_m.h"
// }}

/**
 * Enum generated from <tt>src/node/communication/routing/sBDSDSN/SBDSDSN.msg:20</tt> by nedtool.
 * <pre>
 * enum SBDSDSNPacketDef
 * {
 * 
 *     SBD_SDSN_TRAFFIC_GENERAL = 1;
 *     SBD_DATA_PACKET_REMOTE_UPDATE = 2;
 *     SBD_BEACON_PACKET = 3;
 *     SBD_JOIN_PACKET = 4;
 *     SBD_TDMA_SCHEDULE_PACKET = 5;
 *     SBD_RANGE_QUERY_PACKET = 6;
 *     SDSN_FLOW_REQ_CONTROLLER = 7;
 * }
 * </pre>
 */
enum SBDSDSNPacketDef {
    SBD_SDSN_TRAFFIC_GENERAL = 1,
    SBD_DATA_PACKET_REMOTE_UPDATE = 2,
    SBD_BEACON_PACKET = 3,
    SBD_JOIN_PACKET = 4,
    SBD_TDMA_SCHEDULE_PACKET = 5,
    SBD_RANGE_QUERY_PACKET = 6,
    SDSN_FLOW_REQ_CONTROLLER = 7
};

/**
 * Class generated from <tt>src/node/communication/routing/sBDSDSN/SBDSDSN.msg:30</tt> by nedtool.
 * <pre>
 * packet SBDSDSNPacket extends RoutingPacket
 * {
 *     int SBDSDSNPacketKind @enum(SBDSDSNPacketDef);
 *     int destSectorHeadID;
 *     int slot[];
 *     int segmentAddress[];
 *     string nextHop;
 *     string prevHop;
 *     int sectorSlotNumber;
 * }
 * </pre>
 */
class SBDSDSNPacket : public ::RoutingPacket
{
  protected:
    int SBDSDSNPacketKind_var;
    int destSectorHeadID_var;
    int *slot_var; // array ptr
    unsigned int slot_arraysize;
    int *segmentAddress_var; // array ptr
    unsigned int segmentAddress_arraysize;
    opp_string nextHop_var;
    opp_string prevHop_var;
    int sectorSlotNumber_var;

  private:
    void copy(const SBDSDSNPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const SBDSDSNPacket&);

  public:
    SBDSDSNPacket(const char *name=NULL, int kind=0);
    SBDSDSNPacket(const SBDSDSNPacket& other);
    virtual ~SBDSDSNPacket();
    SBDSDSNPacket& operator=(const SBDSDSNPacket& other);
    virtual SBDSDSNPacket *dup() const {return new SBDSDSNPacket(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getSBDSDSNPacketKind() const;
    virtual void setSBDSDSNPacketKind(int SBDSDSNPacketKind);
    virtual int getDestSectorHeadID() const;
    virtual void setDestSectorHeadID(int destSectorHeadID);
    virtual void setSlotArraySize(unsigned int size);
    virtual unsigned int getSlotArraySize() const;
    virtual int getSlot(unsigned int k) const;
    virtual void setSlot(unsigned int k, int slot);
    virtual void setSegmentAddressArraySize(unsigned int size);
    virtual unsigned int getSegmentAddressArraySize() const;
    virtual int getSegmentAddress(unsigned int k) const;
    virtual void setSegmentAddress(unsigned int k, int segmentAddress);
    virtual const char * getNextHop() const;
    virtual void setNextHop(const char * nextHop);
    virtual const char * getPrevHop() const;
    virtual void setPrevHop(const char * prevHop);
    virtual int getSectorSlotNumber() const;
    virtual void setSectorSlotNumber(int sectorSlotNumber);
};

inline void doPacking(cCommBuffer *b, SBDSDSNPacket& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, SBDSDSNPacket& obj) {obj.parsimUnpack(b);}


#endif // ifndef _SBDSDSN_M_H_

